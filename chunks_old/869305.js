"use strict";
n.r(e), n.d(e, {
  default: function() {
    return q
  }
}), n("860677"), n("222007");
var l = n("917351"),
  u = n.n(l),
  i = n("981980"),
  r = n("151426"),
  a = n("299285"),
  o = n("385976"),
  s = n("789563"),
  d = n("767960"),
  f = n("269596"),
  c = n("288518"),
  E = n("235004"),
  I = n("755624"),
  g = n("800843"),
  S = n("610730"),
  O = n("374363"),
  C = n("116949"),
  T = n("373469"),
  A = n("271938"),
  N = n("950104"),
  _ = n("42203"),
  p = n("86878"),
  v = n("925758"),
  y = n("546463"),
  h = n("341542"),
  R = n("525065"),
  L = n("26989"),
  P = n("305961"),
  m = n("216391"),
  D = n("260320"),
  b = n("169602"),
  V = n("52028"),
  w = n("42887"),
  H = n("824563"),
  U = n("945956"),
  Y = n("660478"),
  B = n("27618"),
  M = n("18494"),
  G = n("282109"),
  F = n("697218"),
  k = n("800762"),
  j = n("357957"),
  J = n("167726"),
  x = n("703370"),
  z = n("953998"),
  W = n("901165"),
  Z = n("819068");
async function q(t, e) {
  let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new i.default;
  await new Promise(t => setImmediate(t));
  let l = F.default.getCurrentUser();
  if (null == l) return new Promise(l => {
    n.fail(() => {
      l(q(t, e, n))
    })
  });
  n.succeed();
  let Q = Object.values(F.default.getUsers()),
    K = Object.values(P.default.getGuilds()),
    X = P.default.getAllGuildsRoles(),
    $ = u.values(_.default.getInitialOverlayState()),
    tt = L.default.getMutableAllGuildsAndMembers(),
    te = Y.default.getAllReadStates(!0),
    tn = k.default.getAllVoiceStates(),
    tl = H.default.getState(),
    tu = h.default.unavailableGuilds,
    ti = u.mapValues(o.default.getGuilds(), t => t.emojis),
    tr = G.default.getAllSettings(),
    ta = N.default.getInternalState(),
    to = z.default.getStates(),
    ts = p.default.getAllConnections(),
    td = V.default.getApplicationActivities(),
    tf = v.default.getParties(),
    tc = v.default.getUserParties(),
    tE = A.default.getSessionId(),
    tI = A.default.getAnalyticsToken(),
    tg = x.default.getGameForPID(e),
    tS = R.default.getMemberCounts(),
    tO = B.default.getRelationships(),
    tC = Array.from(c.default.getMessageRequestChannelIds()),
    tT = M.default.getVoiceChannelId(),
    tA = W.default.getFocusedPID(),
    tN = W.default.getSelectedGuildId(),
    t_ = W.default.getSelectedChannelId(),
    tp = w.default.getState(),
    tv = y.default.games,
    ty = Object.values(j.default.paymentSources).map(t => t.toJS()),
    th = j.default.defaultPaymentSourceId,
    tR = j.default.hasFetchedPaymentSources,
    tL = T.default.getState(),
    tP = a.default._getAllApplications().map(t => t.toJS()),
    tm = J.default.testModeApplicationId,
    tD = {
      null: {
        state: U.default.getState(),
        pings: U.default.getPings(),
        quality: U.default.getQuality(),
        hostname: U.default.getHostname(),
        lossRate: U.default.getOutboundLossRate()
      }
    };
  m.default.forEach((t, e) => {
    tD[e] = {
      state: t.state,
      pings: t.getPings(),
      quality: t.quality,
      hostname: t.hostname,
      lossRate: t.getOutboundLossRate()
    }
  });
  let tb = D.default.getLobbies(),
    tV = b.default.getAllVoiceStates(),
    tw = Array.from(f.default.getState().hiddenHotspots),
    tH = s.default.getSerializedState(),
    tU = d.default.getState(),
    tY = I.default.getInitialOverlayState(),
    tB = g.default.getInitialOverlayState(),
    tM = S.default.getInitialOverlayState(),
    tG = (0, C.protoToB64)(r.PreloadedUserSettings, O.default.settings),
    tF = E.default.getOverlaySerializedState();
  return {
    type: "OVERLAY_INITIALIZE",
    version: Z.OVERLAY_VERSION,
    users: Q,
    guilds: K,
    allGuildsRoles: X,
    channels: $,
    guildMembers: tt,
    readStates: te,
    voiceStates: tn,
    unavailableGuilds: tu,
    emojis: ti,
    allUserGuildSettings: tr,
    callStoreInternalState: ta,
    activityLauncherStates: to,
    connectedApps: ts,
    localActivities: td,
    parties: tf,
    userParties: tc,
    user: l,
    messageRequestChannelIds: tC,
    token: t,
    sessionId: tE,
    analyticsToken: tI,
    presences: tl,
    currentGame: tg,
    selectedVoiceChannelId: tT,
    selectedChannelId: t_,
    selectedGuildId: tN,
    guildMemberCounts: tS,
    relationships: tO,
    mediaEngineState: tp,
    rtcConnectionStates: tD,
    focusedPID: tA,
    applications: tP,
    paymentSources: ty,
    defaultPaymentSourceId: th,
    hasFetchedPaymentSources: tR,
    testModeApplicationId: tm,
    lobbies: tb,
    lobbyVoiceStates: tV,
    applicationStreamState: tL,
    hiddenHotspots: tw,
    serializedExperimentStore: tH,
    streamingCapabilitiesStoreState: tU,
    joinedThreads: tY,
    threadMembers: tB,
    threadMessages: tM,
    userSettingsProto: tG,
    soundboardStoreState: tF,
    detectableApplications: tv
  }
}