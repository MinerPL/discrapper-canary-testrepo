E.d(_, {
  Bq: function() {
return q;
  },
  C0: function() {
return es;
  },
  C2: function() {
return J;
  },
  EN: function() {
return j;
  },
  Et: function() {
return V;
  },
  F1: function() {
return eT;
  },
  HE: function() {
return K;
  },
  HN: function() {
return W;
  },
  Iv: function() {
return en;
  },
  K: function() {
return X;
  },
  ML: function() {
return z;
  },
  N$: function() {
return w;
  },
  N5: function() {
return eA;
  },
  _$: function() {
return eN;
  },
  cT: function() {
return ea;
  },
  em: function() {
return et;
  },
  hQ: function() {
return er;
  },
  hx: function() {
return k;
  },
  lR: function() {
return Y;
  },
  lU: function() {
return x;
  },
  oD: function() {
return y;
  },
  pA: function() {
return ee;
  },
  pY: function() {
return b;
  },
  pi: function() {
return $;
  },
  rK: function() {
return eE;
  },
  uB: function() {
return Q;
  },
  vc: function() {
return eI;
  },
  vm: function() {
return e_;
  }
}), E(411104), E(653041);
var s = E(654861),
  T = E.n(s),
  I = E(913527),
  n = E.n(I),
  A = E(536402),
  t = E(533800),
  a = E(149765),
  r = E(866442),
  N = E(911969),
  L = E(933557),
  S = E(710845),
  D = E(339085),
  l = E(236413),
  U = E(45966),
  G = E(563534),
  O = E(987707),
  M = E(427679),
  i = E(926491),
  R = E(387667),
  u = E(592125),
  o = E(430824),
  c = E(699516),
  C = E(594174),
  g = E(55935),
  d = E(630388),
  Z = E(823379),
  P = E(971130),
  f = E(709054),
  H = E(981631),
  h = E(176505),
  p = E(273504),
  m = E(765305),
  F = E(689938);
let v = new S.Z('AuditLogUtils'),
  V = -1,
  B = () => ({
[H.zUn.REASON]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
  }),
  b = () => ({
[H.zUn.NAME]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_NAME_CHANGE,
[H.zUn.DESCRIPTION]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CHANGE),
[H.zUn.ICON_HASH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_ICON_HASH_CHANGE,
[H.zUn.SPLASH_HASH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SPLASH_HASH_CHANGE,
[H.zUn.DISCOVERY_SPLASH_HASH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DISCOVERY_SPLASH_HASH_CHANGE,
[H.zUn.BANNER_HASH]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_REMOVE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_CHANGE),
[H.zUn.OWNER_ID]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_OWNER_ID_CHANGE,
[H.zUn.REGION]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_REGION_CHANGE,
[H.zUn.PREFERRED_LOCALE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREFERRED_LOCALE_CHANGE,
[H.zUn.AFK_CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CHANGE),
[H.zUn.AFK_TIMEOUT]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_TIMEOUT_CHANGE,
[H.zUn.SYSTEM_CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_DISABLE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_CHANGE),
[H.zUn.RULES_CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CHANGE),
[H.zUn.PUBLIC_UPDATES_CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CHANGE),
[H.zUn.MFA_LEVEL]: {
  [H.BpS.NONE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_DISABLED,
  [H.BpS.ELEVATED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_ENABLED
},
[H.zUn.WIDGET_ENABLED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_ENABLED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_DISABLED
},
[H.zUn.WIDGET_CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_DELETE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_CHANGE),
[H.zUn.VERIFICATION_LEVEL]: {
  [H.sFg.NONE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_NONE,
  [H.sFg.LOW]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_LOW,
  [H.sFg.MEDIUM]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_MEDIUM,
  [H.sFg.HIGH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_HIGH,
  [H.sFg.VERY_HIGH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_VERY_HIGH
},
[H.zUn.DEFAULT_MESSAGE_NOTIFICATIONS]: {
  [H.bL.ALL_MESSAGES]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ALL_MESSAGES,
  [H.bL.ONLY_MENTIONS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ONLY_MENTIONS
},
[H.zUn.VANITY_URL_CODE]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_DELETE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_CHANGE),
[H.zUn.EXPLICIT_CONTENT_FILTER]: {
  [H.lxg.DISABLED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_DISABLE,
  [H.lxg.MEMBERS_WITHOUT_ROLES]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_MEMBERS_WITHOUT_ROLES,
  [H.lxg.ALL_MEMBERS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_ALL_MEMBERS
},
[H.zUn.PREMIUM_PROGRESS_BAR_ENABLED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_ENABLED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_DISABLED
},
[H.zUn.AUTO_MODERATION_TRIGGERED_RULE_NAME]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
[H.zUn.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATIONS,
[H.zUn.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTIONS,
[H.zUn.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_REMINDER_NOTIFICATIONS,
[H.zUn.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATION_REPLIES,
...B()
  }),
  z = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CHANGE),
[H.zUn.POSITION]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CHANGE),
[H.zUn.TOPIC]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CLEAR),
[H.zUn.BITRATE]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CHANGE),
[H.zUn.RTC_REGION_OVERRIDE]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CHANGE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_DELETE),
[H.zUn.USER_LIMIT]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CHANGE),
[H.zUn.RATE_LIMIT_PER_USER]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
[H.zUn.PERMISSIONS_RESET]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_RESET,
[H.zUn.PERMISSIONS_GRANTED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_GRANTED,
[H.zUn.PERMISSIONS_DENIED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_DENIED,
[H.zUn.REASON]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON,
[H.zUn.NSFW]: {
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_DISABLED,
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_ENABLED
},
[H.zUn.TYPE]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CHANGE),
[H.zUn.VIDEO_QUALITY_MODE]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CHANGE),
[H.zUn.DEFAULT_AUTO_ARCHIVE_DURATION]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CHANGE),
[H.zUn.FLAGS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_FLAGS_CHANGE,
[H.zUn.AVAILABLE_TAG_ADD]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_ADD,
[H.zUn.AVAILABLE_TAG_EDIT]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_UPDATE,
[H.zUn.AVAILABLE_TAG_DELETE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_DELETE
  }),
  x = () => ({
[H.zUn.NICK]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CHANGE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_DELETE),
[H.zUn.DEAF]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_OFF
},
[H.zUn.MUTE]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_OFF
},
[H.zUn.ROLES_REMOVE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_REMOVE,
[H.zUn.ROLES_ADD]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_ADD,
[H.zUn.PRUNE_DELETE_DAYS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE_DELETE_DAYS,
[H.zUn.COMMUNICATION_DISABLED_UNTIL]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL_REMOVED),
[H.zUn.BYPASSES_VERIFICATION]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_OFF
},
[H.zUn.AUTO_MODERATION_TRIGGERED_RULE_NAME]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE,
...B()
  }),
  K = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CHANGE),
[H.zUn.DESCRIPTION]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE),
[H.zUn.PERMISSIONS_GRANTED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_GRANTED,
[H.zUn.PERMISSIONS_DENIED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_DENIED,
[H.zUn.COLOR]: {
  '#000000': F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_NONE,
  [V]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_IOS
},
[H.zUn.HOIST]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_OFF
},
[H.zUn.MENTIONABLE]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_OFF
},
[H.zUn.ICON_HASH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_ICON_HASH_CHANGE,
[H.zUn.UNICODE_EMOJI]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UNICODE_EMOJI_CHANGE,
...B()
  }),
  y = () => ({
...B(),
[H.zUn.TITLE]: e => {
  let {
    oldValue: _,
    newValue: E
  } = e;
  return null != _ ? (0 === _.length && (_ = F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE), F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CHANGE.format({
    oldValue: _,
    newValue: E
  })) : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CREATE;
},
[H.zUn.DESCRIPTION]: e => {
  let {
    oldValue: _,
    newValue: E
  } = e;
  return null != _ ? (0 === _.length && (_ = F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE), F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CHANGE.format({
    oldValue: _,
    newValue: E
  })) : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CREATE.format({
    newValue: E
  });
},
[H.zUn.OPTIONS]: () => F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_CHANGED_OPTIONS,
[H.zUn.SINGLE_SELECT]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_SINGLE_SELECT,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_MULTI_SELECT
},
[H.zUn.REQUIRED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_REQUIRED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_OPTIONAL
}
  }),
  j = () => ({
...B(),
[H.zUn.DEFAULT_CHANNEL_IDS]: e => {
  let {
    newValue: _
  } = e;
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DEFAULT_CHANNEL_IDS.format({
    count: _.length
  });
},
[H.zUn.ENABLE_DEFAULT_CHANNELS]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_DEFAULT_CHANNELS,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_DEFAULT_CHANNELS
},
[H.zUn.ENABLE_ONBOARDING_PROMPTS]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_PROMPTS,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_PROMPTS
},
[H.zUn.ENABLED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE
}
  }),
  k = () => ({
...B(),
[H.zUn.WELCOME_MESSAGE]: () => F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_WELCOME_MESSAGE,
[H.zUn.NEW_MEMBER_ACTIONS]: () => F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_NEW_MEMBER_ACTIONS,
[H.zUn.RESOURCE_CHANNELS]: () => F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_RESOURCE_CHANNELS
  }),
  W = () => ({
[H.zUn.CODE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CODE_CREATE,
[H.zUn.CHANNEL_ID]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CHANNEL_CREATE,
[H.zUn.MAX_USES]: {
  0: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE_INFINITE,
  [V]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE
},
[H.zUn.MAX_AGE]: {
  0: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE_INFINITE,
  [V]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE
},
[H.zUn.TEMPORARY]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_OFF
},
[H.zUn.FLAGS]: e => {
  let {
    newValue: _
  } = e;
  return function(e) {
    let {
      newValue: _
    } = e;
    return _.map(e => function(e) {
      if (e === t.$.IS_GUEST_INVITE)
        return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_INVITE_GUEST_INVITE;
      return null;
    }(e)).filter(Z.lm);
  }({
    newValue: _
  });
},
...B()
  }),
  Y = () => ({
[H.zUn.CHANNEL_ID]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CHANGE),
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CHANGE),
[H.zUn.AVATAR_HASH]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_AVATAR,
[H.zUn.REASON]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON
  }),
  w = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CHANGE),
...B()
  }),
  q = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_NAME_CHANGE),
[H.zUn.TAGS]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_TAGS_CHANGE),
[H.zUn.DESCRIPTION]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE),
...B()
  }),
  X = () => ({
[H.zUn.ENABLE_EMOTICONS]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_ON,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_OFF
},
[H.zUn.EXPIRE_BEHAVIOR]: {
  0: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_REMOVE_SYNCED_ROLE,
  1: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_KICK_FROM_SERVER
},
[H.zUn.EXPIRE_GRACE_PERIOD]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_GRACE_PERIOD,
...B()
  }),
  J = () => ({
[H.zUn.TOPIC]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE),
[H.zUn.PRIVACY_LEVEL]: {
  [m.j8.GUILD_ONLY]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
  [m.j8.PUBLIC]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
},
...B()
  }),
  Q = () => ({
[H.zUn.NAME]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_NAME_CREATE,
[H.zUn.DESCRIPTION]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DESCRIPTION_CREATE,
[H.zUn.PRIVACY_LEVEL]: {
  [m.j8.GUILD_ONLY]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY,
  [m.j8.PUBLIC]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC
},
[H.zUn.STATUS]: {
  [m.p1.SCHEDULED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_SCHEDULED,
  [m.p1.ACTIVE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_ACTIVE,
  [m.p1.COMPLETED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_COMPLETED,
  [m.p1.CANCELED]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_CANCELED
},
[H.zUn.ENTITY_TYPE]: {
  [m.WX.NONE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_NONE,
  [m.WX.STAGE_INSTANCE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_STAGE_INSTANCE,
  [m.WX.VOICE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_VOICE,
  [m.WX.EXTERNAL]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_EXTERNAL
},
[H.zUn.CHANNEL_ID]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL),
[H.zUn.LOCATION]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION_CLEAR, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION),
[H.zUn.IMAGE_HASH]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_REMOVE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_CHANGE),
...B()
  }),
  $ = () => ({
[H.zUn.SCHEDULED_START_TIME]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_START_TIME_REMOVED, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_START_TIME_CHANGE),
[H.zUn.SCHEDULED_END_TIME]: eO(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_END_TIME_REMOVED, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_END_TIME_CHANGE),
[H.zUn.IS_CANCELED]: e => {
  if (null != e.oldValue || !0 === e.newValue) {
    if (!e.oldValue && e.newValue)
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_IS_CANCELED_CANCELED;
    if (e.oldValue && !e.newValue)
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_IS_CANCELED_RESTORED;
  }
  return '';
},
...B()
  }),
  ee = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CHANGE),
[H.zUn.ARCHIVED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_ARCHIVED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNARCHIVED
},
[H.zUn.LOCKED]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_LOCKED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UNLOCKED
},
[H.zUn.INVITABLE]: {
  true: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_ENABLED,
  false: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_DISABLED
},
[H.zUn.AUTO_ARCHIVE_DURATION]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CHANGE),
[H.zUn.RATE_LIMIT_PER_USER]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE),
[H.zUn.FLAGS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_FLAGS_CHANGE,
...B()
  }),
  e_ = e => {
let _ = {
  ...B()
};
return null == e || e.forEach(e => {
  e.newValue ? e.newValue.permission ? _[e.key] = F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_GRANTED : _[e.key] = F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_DENIED : _[e.key] = F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_REMOVED;
}), _;
  },
  eE = () => ({
[H.zUn.NAME]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NAME_UPDATE,
[H.zUn.AUTO_MODERATION_TRIGGER_TYPE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_TYPE_UPDATE,
[H.zUn.AUTO_MODERATION_EVENT_TYPE]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EVENT_TYPE_UPDATE,
[H.zUn.AUTO_MODERATION_ACTIONS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ACTIONS_UPDATE,
[H.zUn.AUTO_MODERATION_ENABLED]: e => {
  var _;
  return !0 === (null !== (_ = e.newValue) && void 0 !== _ ? _ : e.oldValue) ? F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ENABLED_UPDATE : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DISABLED_UPDATE;
},
[H.zUn.AUTO_MODERATION_EXEMPT_ROLES]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_ROLES_UPDATE,
[H.zUn.AUTO_MODERATION_EXEMPT_CHANNELS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_CHANNELS_UPDATE,
[H.zUn.AUTO_MODERATION_TRIGGER_METADATA]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_UPDATE,
[H.zUn.AUTO_MODERATION_ADD_KEYWORDS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_KEYWORDS,
[H.zUn.AUTO_MODERATION_REMOVE_KEYWORDS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_KEYWORDS,
[H.zUn.AUTO_MODERATION_ADD_REGEX_PATTERNS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_REGEX_PATTERNS,
[H.zUn.AUTO_MODERATION_REMOVE_REGEX_PATTERNS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_REGEX_PATTERNS,
[H.zUn.AUTO_MODERATION_ADD_ALLOW_LIST]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_ALLOW_LIST,
[H.zUn.AUTO_MODERATION_REMOVE_ALLOW_LIST]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_ALLOW_LIST,
...B()
  }),
  es = () => ({
[H.zUn.NAME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CHANGE),
[H.zUn.VOLUME]: eG(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CHANGE),
[H.zUn.EMOJI_NAME]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REPLACE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REMOVE),
[H.zUn.EMOJI_ID]: eM(F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REPLACE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_CREATE, F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REMOVE),
...B()
  }),
  eT = () => ({
[H.zUn.STATUS]: F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_STATUS_CREATE,
...B()
  }),
  eI = {
[H.KFR.CHANNEL]: {
  [H.zUn.ID]: !0,
  [H.zUn.PERMISSION_OVERWRITES]: !0
},
[H.KFR.CHANNEL_OVERWRITE]: {
  [H.zUn.TYPE]: !0,
  [H.zUn.ID]: !0,
  [H.zUn.PERMISSION_OVERWRITES]: !0
},
[H.KFR.INVITE]: {
  [H.zUn.INVITER_ID]: !0,
  [H.zUn.USES]: !0
},
[H.KFR.WEBHOOK]: {
  [H.zUn.TYPE]: !0,
  [H.zUn.APPLICATION_ID]: !0
},
[H.KFR.INTEGRATION]: {
  [H.zUn.TYPE]: !0
},
[H.KFR.THREAD]: {
  [H.zUn.ID]: !0,
  [H.zUn.TYPE]: !0
},
[H.KFR.STICKER]: {
  [H.zUn.ID]: !0,
  [H.zUn.TYPE]: !0,
  [H.zUn.ASSET]: !0,
  [H.zUn.FORMAT_TYPE]: !0,
  [H.zUn.AVAILABLE]: !0,
  [H.zUn.GUILD_ID]: !0
},
[H.KFR.GUILD_HOME]: {
  [H.zUn.ENTITY_TYPE]: !0
},
[H.KFR.GUILD_ONBOARDING]: {
  [H.zUn.PROMPTS]: !0
},
[H.KFR.GUILD_SOUNDBOARD]: {
  [H.zUn.ID]: !0,
  [H.zUn.SOUND_ID]: !0
}
  },
  en = () => [{
  value: H.rsA.ALL,
  label: F.Z.Messages.GUILD_SETTINGS_FILTER_ALL_ACTIONS,
  valueLabel: F.Z.Messages.GUILD_SETTINGS_FILTER_ALL
},
{
  value: H.rsA.GUILD_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_UPDATE
},
{
  value: H.rsA.CHANNEL_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_CREATE
},
{
  value: H.rsA.CHANNEL_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_UPDATE
},
{
  value: H.rsA.CHANNEL_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_DELETE
},
{
  value: H.rsA.CHANNEL_OVERWRITE_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_CREATE
},
{
  value: H.rsA.CHANNEL_OVERWRITE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_UPDATE
},
{
  value: H.rsA.CHANNEL_OVERWRITE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_DELETE
},
{
  value: H.rsA.MEMBER_KICK,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_KICK
},
{
  value: H.rsA.MEMBER_PRUNE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_PRUNE
},
{
  value: H.rsA.MEMBER_BAN_ADD,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_ADD
},
{
  value: H.rsA.MEMBER_BAN_REMOVE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_REMOVE
},
{
  value: H.rsA.MEMBER_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_UPDATE
},
{
  value: H.rsA.MEMBER_ROLE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_ROLE_UPDATE
},
{
  value: H.rsA.MEMBER_MOVE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_MOVE
},
{
  value: H.rsA.MEMBER_DISCONNECT,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MEMBER_DISCONNECT
},
{
  value: H.rsA.BOT_ADD,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_BOT_ADD
},
{
  value: H.rsA.THREAD_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_CREATE
},
{
  value: H.rsA.THREAD_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_UPDATE
},
{
  value: H.rsA.THREAD_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_THREAD_DELETE
},
{
  value: H.rsA.ROLE_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE
},
{
  value: H.rsA.ROLE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_UPDATE
},
{
  value: H.rsA.ROLE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_DELETE
},
{
  value: H.rsA.ONBOARDING_PROMPT_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_CREATE
},
{
  value: H.rsA.ONBOARDING_PROMPT_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_UPDATE
},
{
  value: H.rsA.ONBOARDING_PROMPT_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_DELETE
},
{
  value: H.rsA.ONBOARDING_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_CREATE
},
{
  value: H.rsA.ONBOARDING_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_UPDATE
},
{
  value: H.rsA.HOME_SETTINGS_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_CREATE
},
{
  value: H.rsA.HOME_SETTINGS_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_UPDATE
},
{
  value: H.rsA.INVITE_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_CREATE
},
{
  value: H.rsA.INVITE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_UPDATE
},
{
  value: H.rsA.INVITE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INVITE_DELETE
},
{
  value: H.rsA.WEBHOOK_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_CREATE
},
{
  value: H.rsA.WEBHOOK_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_UPDATE
},
{
  value: H.rsA.WEBHOOK_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_DELETE
},
{
  value: H.rsA.EMOJI_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_CREATE
},
{
  value: H.rsA.EMOJI_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_UPDATE
},
{
  value: H.rsA.EMOJI_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_EMOJI_DELETE
},
{
  value: H.rsA.MESSAGE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_DELETE
},
{
  value: H.rsA.MESSAGE_BULK_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_BULK_DELETE
},
{
  value: H.rsA.MESSAGE_PIN,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_PIN
},
{
  value: H.rsA.MESSAGE_UNPIN,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_MESSAGE_UNPIN
},
{
  value: H.rsA.INTEGRATION_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_CREATE
},
{
  value: H.rsA.INTEGRATION_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_UPDATE
},
{
  value: H.rsA.INTEGRATION_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_DELETE
},
{
  value: H.rsA.STICKER_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_CREATE
},
{
  value: H.rsA.STICKER_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_UPDATE
},
{
  value: H.rsA.STICKER_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STICKER_DELETE
},
{
  value: H.rsA.STAGE_INSTANCE_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_CREATE
},
{
  value: H.rsA.STAGE_INSTANCE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_UPDATE
},
{
  value: H.rsA.STAGE_INSTANCE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_DELETE
},
{
  value: H.rsA.GUILD_SCHEDULED_EVENT_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_CREATE
},
{
  value: H.rsA.GUILD_SCHEDULED_EVENT_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_UPDATE
},
{
  value: H.rsA.GUILD_SCHEDULED_EVENT_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_DELETE
},
{
  value: H.rsA.APPLICATION_COMMAND_PERMISSION_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_APPLICATION_COMMAND_PERMISSION_UPDATE
},
{
  value: H.rsA.AUTO_MODERATION_BLOCK_MESSAGE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTO_MODERATION_BLOCK_MESSAGE
},
{
  value: H.rsA.AUTO_MODERATION_RULE_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_CREATE
},
{
  value: H.rsA.AUTO_MODERATION_RULE_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_UPDATE
},
{
  value: H.rsA.AUTO_MODERATION_RULE_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_DELETE
},
{
  value: H.rsA.GUILD_HOME_FEATURE_ITEM,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_FEATURE_ITEM
},
{
  value: H.rsA.GUILD_HOME_REMOVE_ITEM,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_REMOVE_ITEM
},
{
  value: H.rsA.SOUNDBOARD_SOUND_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_CREATE
},
{
  value: H.rsA.SOUNDBOARD_SOUND_UPDATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_UPDATE
},
{
  value: H.rsA.SOUNDBOARD_SOUND_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_DELETE
},
{
  value: H.rsA.VOICE_CHANNEL_STATUS_CREATE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_CREATE
},
{
  value: H.rsA.VOICE_CHANNEL_STATUS_DELETE,
  label: F.Z.Messages.GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_DELETE
}
  ];

function eA(e) {
  switch (e.action) {
case H.rsA.GUILD_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATE;
case H.rsA.CHANNEL_CREATE:
  let _ = null != e.changes ? e.changes.find(e => e.key === H.zUn.TYPE) : null;
  if (null == _)
    throw Error('[AuditLog] Could not find type change for channel create');
  switch (_.newValue) {
    case H.d4z.GUILD_STAGE_VOICE:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_STAGE_CREATE;
    case H.d4z.GUILD_VOICE:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VOICE_CREATE;
    case H.d4z.GUILD_CATEGORY:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_CATEGORY_CREATE;
    default:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TEXT_CREATE;
  }
case H.rsA.CHANNEL_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_UPDATE;
case H.rsA.CHANNEL_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DELETE;
case H.rsA.CHANNEL_OVERWRITE_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_CREATE;
case H.rsA.CHANNEL_OVERWRITE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_UPDATE;
case H.rsA.CHANNEL_OVERWRITE_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_DELETE;
case H.rsA.MEMBER_KICK:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_KICK;
case H.rsA.MEMBER_PRUNE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE;
case H.rsA.MEMBER_BAN_ADD:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_ADD;
case H.rsA.MEMBER_BAN_REMOVE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_REMOVE;
case H.rsA.MEMBER_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_UPDATE;
case H.rsA.MEMBER_ROLE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLE_UPDATE;
case H.rsA.MEMBER_MOVE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_MOVE;
case H.rsA.MEMBER_DISCONNECT:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MEMBER_DISCONNECT;
case H.rsA.BOT_ADD:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_BOT_ADD;
case H.rsA.ROLE_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_CREATE;
case H.rsA.ROLE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_UPDATE;
case H.rsA.ROLE_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_DELETE;
case H.rsA.INVITE_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_CREATE;
case H.rsA.INVITE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_UPDATE;
case H.rsA.INVITE_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INVITE_DELETE;
case H.rsA.WEBHOOK_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CREATE;
case H.rsA.WEBHOOK_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_UPDATE;
case H.rsA.WEBHOOK_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_DELETE;
case H.rsA.EMOJI_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_CREATE;
case H.rsA.EMOJI_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_UPDATE;
case H.rsA.EMOJI_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_EMOJI_DELETE;
case H.rsA.STICKER_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_CREATE;
case H.rsA.STICKER_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_UPDATE;
case H.rsA.STICKER_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STICKER_DELETE;
case H.rsA.MESSAGE_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_DELETE;
case H.rsA.MESSAGE_BULK_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_BULK_DELETE;
case H.rsA.MESSAGE_PIN:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_PIN;
case H.rsA.MESSAGE_UNPIN:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_MESSAGE_UNPIN;
case H.rsA.INTEGRATION_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_CREATE;
case H.rsA.INTEGRATION_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_UPDATE;
case H.rsA.INTEGRATION_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_DELETE;
case H.rsA.STAGE_INSTANCE_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_CREATE;
case H.rsA.STAGE_INSTANCE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_UPDATE;
case H.rsA.STAGE_INSTANCE_DELETE:
  if (null != e.userId)
    return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE;
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE_NO_USER;
case H.rsA.GUILD_SCHEDULED_EVENT_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CREATE;
case H.rsA.GUILD_SCHEDULED_EVENT_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_UPDATE;
case H.rsA.GUILD_SCHEDULED_EVENT_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DELETE;
case H.rsA.GUILD_SCHEDULED_EVENT_EXCEPTION_CREATE:
case H.rsA.GUILD_SCHEDULED_EVENT_EXCEPTION_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_UPDATE;
case H.rsA.GUILD_SCHEDULED_EVENT_EXCEPTION_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_DELETE;
case H.rsA.THREAD_CREATE:
  let E = null != e.changes ? e.changes.find(e => e.key === H.zUn.TYPE) : null;
  if (null == E)
    throw Error('[AuditLog] Could not find type change for thread create');
  switch (E.newValue) {
    case H.d4z.PRIVATE_THREAD:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_PRIVATE_THREAD_CREATE;
    case H.d4z.ANNOUNCEMENT_THREAD:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ANNOUNCEMENT_THREAD_CREATE;
    default:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_CREATE;
  }
case H.rsA.THREAD_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_UPDATE;
case H.rsA.THREAD_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_THREAD_DELETE;
case H.rsA.APPLICATION_COMMAND_PERMISSION_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_UPDATE;
case H.rsA.AUTO_MODERATION_BLOCK_MESSAGE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_BLOCK_MESSAGE;
case H.rsA.AUTO_MODERATION_FLAG_TO_CHANNEL:
  var s;
  if ((null === (s = e.options) || void 0 === s ? void 0 : s.auto_moderation_rule_trigger_type) === p.fX.USER_PROFILE.toString())
    return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAGGED_USER_PROFILE;
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAG_TO_CHANNEL_MESSAGE;
case H.rsA.AUTO_MODERATION_USER_COMMUNICATION_DISABLED:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_USER_COMMUNICATION_DISABLED_MESSAGE;
case H.rsA.AUTO_MODERATION_QUARANTINE_USER:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_QUARANTINE_USER;
case H.rsA.CREATOR_MONETIZATION_REQUEST_CREATED:
  return F.Z.Messages.CREATOR_MONETIZATION_APPLIED_AUDIT_LOG_TITLE;
case H.rsA.CREATOR_MONETIZATION_TERMS_ACCEPTED:
  return F.Z.Messages.CREATOR_MONETIZATION_TERMS_ACCEPTED_AUDIT_LOG_TITLE;
case H.rsA.AUTO_MODERATION_RULE_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_CREATE;
case H.rsA.AUTO_MODERATION_RULE_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_UPDATE;
case H.rsA.AUTO_MODERATION_RULE_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DELETE;
case H.rsA.ONBOARDING_PROMPT_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_CREATE;
case H.rsA.ONBOARDING_PROMPT_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_UPDATE;
case H.rsA.ONBOARDING_PROMPT_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DELETE;
case H.rsA.ONBOARDING_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_CREATE;
case H.rsA.ONBOARDING_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_UPDATE;
case H.rsA.HOME_SETTINGS_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CREATE;
case H.rsA.HOME_SETTINGS_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_UPDATE;
case H.rsA.GUILD_HOME_FEATURE_ITEM:
  let T = null != e.changes ? e.changes.find(e => e.key === H.zUn.ENTITY_TYPE) : null;
  if (null == T)
    return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_ITEM;
  switch (T.newValue) {
    case A.w.MESSAGE:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_MESSAGE;
    case A.w.FORUM_POST:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_FORUM_POST;
    default:
      return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_ITEM;
  }
case H.rsA.GUILD_HOME_REMOVE_ITEM:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_ITEM;
case H.rsA.SOUNDBOARD_SOUND_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_CREATED;
case H.rsA.SOUNDBOARD_SOUND_UPDATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_UPDATED;
case H.rsA.SOUNDBOARD_SOUND_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_DELETED;
case H.rsA.VOICE_CHANNEL_STATUS_CREATE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_CREATED;
case H.rsA.VOICE_CHANNEL_STATUS_DELETE:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_DELETED;
default:
  return null;
  }
}

function et(e) {
  switch (e) {
case h.zZ.GUILD_FEED_REMOVED:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_CHANNEL;
case h.zZ.ACTIVE_CHANNELS_REMOVED:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_REMOVE_CHANNEL;
case h.zZ.PINNED:
  return F.Z.Messages.PINNED_POST;
  }
  return null;
}

function ea(e) {
  switch (e) {
case h.zZ.GUILD_FEED_REMOVED:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_UNREMOVE_CHANNEL;
case h.zZ.ACTIVE_CHANNELS_REMOVED:
  return F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_UNREMOVE_CHANNEL;
case h.zZ.PINNED:
  return F.Z.Messages.UNPINNED_POST;
  }
  return null;
}

function er(e, _) {
  switch (e) {
case H.Plq.CREATE_INSTANT_INVITE:
  return F.Z.Messages.CREATE_INSTANT_INVITE;
case H.Plq.KICK_MEMBERS:
  return F.Z.Messages.KICK_MEMBERS;
case H.Plq.BAN_MEMBERS:
  return F.Z.Messages.BAN_MEMBERS;
case H.Plq.ADMINISTRATOR:
  return F.Z.Messages.ADMINISTRATOR;
case H.Plq.MANAGE_CHANNELS:
  if (_.targetType === H.KFR.CHANNEL || _.targetType === H.KFR.CHANNEL_OVERWRITE)
    return F.Z.Messages.MANAGE_CHANNEL;
  return F.Z.Messages.MANAGE_CHANNELS;
case H.Plq.MANAGE_GUILD:
  return F.Z.Messages.MANAGE_SERVER;
case H.Plq.VIEW_GUILD_ANALYTICS:
  return F.Z.Messages.VIEW_GUILD_ANALYTICS;
case H.Plq.VIEW_CREATOR_MONETIZATION_ANALYTICS:
  return F.Z.Messages.VIEW_CREATOR_MONETIZATION_ANALYTICS;
case H.Plq.CHANGE_NICKNAME:
  return F.Z.Messages.CHANGE_NICKNAME;
case H.Plq.MANAGE_NICKNAMES:
  return F.Z.Messages.MANAGE_NICKNAMES;
case H.Plq.MANAGE_ROLES:
  return F.Z.Messages.MANAGE_ROLES;
case H.Plq.MANAGE_WEBHOOKS:
  return F.Z.Messages.MANAGE_WEBHOOKS;
case H.Plq.CREATE_GUILD_EXPRESSIONS:
  return F.Z.Messages.CREATE_EXPRESSIONS;
case H.Plq.MANAGE_GUILD_EXPRESSIONS:
  return F.Z.Messages.MANAGE_EXPRESSIONS;
case H.Plq.VIEW_AUDIT_LOG:
  return F.Z.Messages.VIEW_AUDIT_LOG;
case H.Plq.VIEW_CHANNEL:
  if (_.targetType === H.KFR.CHANNEL || _.targetType === H.KFR.CHANNEL_OVERWRITE)
    return F.Z.Messages.VIEW_CHANNEL;
  return F.Z.Messages.ROLE_PERMISSIONS_VIEW_CHANNEL;
case H.Plq.SEND_MESSAGES:
  return F.Z.Messages.SEND_MESSAGES;
case H.Plq.SEND_TTS_MESSAGES:
  return F.Z.Messages.SEND_TTS_MESSAGES;
case H.Plq.USE_APPLICATION_COMMANDS:
  return F.Z.Messages.USE_APPLICATION_COMMANDS;
case H.Plq.MANAGE_MESSAGES:
  return F.Z.Messages.MANAGE_MESSAGES;
case H.Plq.EMBED_LINKS:
  return F.Z.Messages.EMBED_LINKS;
case H.Plq.ATTACH_FILES:
  return F.Z.Messages.ATTACH_FILES;
case H.Plq.READ_MESSAGE_HISTORY:
  return F.Z.Messages.READ_MESSAGE_HISTORY;
case H.Plq.MENTION_EVERYONE:
  return F.Z.Messages.MENTION_EVERYONE;
case H.Plq.USE_EXTERNAL_EMOJIS:
  return F.Z.Messages.USE_EXTERNAL_EMOJIS;
case H.Plq.USE_EXTERNAL_STICKERS:
  return F.Z.Messages.USE_EXTERNAL_STICKERS;
case H.Plq.ADD_REACTIONS:
  return F.Z.Messages.ADD_REACTIONS;
case H.Plq.CONNECT:
  return F.Z.Messages.CONNECT;
case H.Plq.SPEAK:
  return F.Z.Messages.SPEAK;
case H.Plq.MUTE_MEMBERS:
  return F.Z.Messages.MUTE_MEMBERS;
case H.Plq.DEAFEN_MEMBERS:
  return F.Z.Messages.DEAFEN_MEMBERS;
case H.Plq.MOVE_MEMBERS:
  return F.Z.Messages.MOVE_MEMBERS;
case H.Plq.USE_VAD:
  return F.Z.Messages.USE_VAD;
case H.Plq.PRIORITY_SPEAKER:
  return F.Z.Messages.PRIORITY_SPEAKER;
case H.Plq.STREAM:
  return F.Z.Messages.VIDEO;
case H.Plq.REQUEST_TO_SPEAK:
  return F.Z.Messages.REQUEST_TO_SPEAK;
case H.Plq.CREATE_EVENTS:
  return F.Z.Messages.CREATE_EVENTS;
case H.Plq.MANAGE_EVENTS:
  return F.Z.Messages.MANAGE_EVENTS;
case H.Plq.CREATE_PUBLIC_THREADS:
  return F.Z.Messages.CREATE_PUBLIC_THREADS;
case H.Plq.CREATE_PRIVATE_THREADS:
  return F.Z.Messages.CREATE_PRIVATE_THREADS;
case H.Plq.SEND_MESSAGES_IN_THREADS:
  return F.Z.Messages.SEND_MESSAGES_IN_THREADS;
case H.Plq.MANAGE_THREADS:
  return F.Z.Messages.MANAGE_THREADS;
case H.Plq.MODERATE_MEMBERS:
  return F.Z.Messages.MODERATE_MEMBER;
case H.Plq.USE_CLYDE_AI:
  return F.Z.Messages.ROLE_PERMISSIONS_USE_CLYDE_AI;
case H.Plq.SET_VOICE_CHANNEL_STATUS:
  return F.Z.Messages.VOICE_CHANNEL_STATUS_PERMISSION_TITLE;
case H.Plq.SEND_POLLS:
  return F.Z.Messages.ROLE_PERMISSIONS_SEND_POLLS;
case H.Plq.USE_EXTERNAL_APPS:
  return F.Z.Messages.ROLE_PERMISSIONS_USE_EXTERNAL_APPS;
  }
  return null;
}

function eN(e, _) {
  let E = [];
  return e.forEach(e => {
let s = function(e, _) {
    switch (e.targetType) {
      case H.KFR.GUILD:
      case H.KFR.GUILD_HOME:
        return _;
      case H.KFR.CHANNEL:
      case H.KFR.CHANNEL_OVERWRITE:
        return el(e, H.zUn.NAME, e => u.Z.getChannel(e), e => (0, L.F6)(e, C.default, c.Z, !0));
      case H.KFR.USER:
        return el(e, H.zUn.NICK, e => C.default.getUser(e), e => e);
      case H.KFR.ROLE:
        return el(e, H.zUn.NAME, e => o.Z.getRole(_.id, e), e => e.name);
      case H.KFR.ONBOARDING_PROMPT:
        let E = el(e, H.zUn.ID, e => U.Z.getOnboardingPrompt(e), e => e.title);
        return null != E ? E : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE;
      case H.KFR.GUILD_ONBOARDING:
        return _;
      case H.KFR.INVITE:
        return el(e, H.zUn.CODE, H.VqG);
      case H.KFR.INTEGRATION:
        return el(e, H.zUn.TYPE, e => O.Z.integrations.find(_ => _.id === e), e => e.name);
      case H.KFR.WEBHOOK:
        return el(e, H.zUn.NAME, e => O.Z.webhooks.find(_ => _.id === e), e => e.name);
      case H.KFR.EMOJI:
        return el(e, H.zUn.NAME, e => D.Z.getGuildEmoji(_.id).find(_ => _.id === e), e => e.name);
      case H.KFR.STICKER:
        return el(e, H.zUn.NAME, e => i.Z.getStickerById(e), e => e.name);
      case H.KFR.STAGE_INSTANCE:
        return el(e, H.zUn.TOPIC, e => {
          var E;
          return null === (E = Object.values(M.Z.getStageInstancesByGuild(_.id))) || void 0 === E ? void 0 : E.find(_ => _.id === e);
        }, e => e.topic);
      case H.KFR.GUILD_SCHEDULED_EVENT:
      case H.KFR.GUILD_SCHEDULED_EVENT_EXCEPTION:
        return el(e, H.zUn.NAME, e => O.Z.guildScheduledEvents.find(_ => _.id === e), e => e.name);
      case H.KFR.THREAD:
        return el(e, H.zUn.NAME, e => O.Z.threads.find(_ => _.id === e), e => e.name);
      case H.KFR.APPLICATION_COMMAND:
        if (e.targetId === e.options.application_id) {
          let _ = O.Z.integrations.find(_ => _.application_id === e.targetId);
          if (null != _)
            return _.name;
          return e.targetId;
        }
        return el(e, H.zUn.NAME, e => O.Z.applicationCommands.find(_ => _.id === e), e => {
          let _ = null != e.name_localized && '' !== e.name_localized ? e.name_localized : e.name;
          return e.type === N.yU.CHAT ? '/\u2060'.concat(_) : _;
        });
      case H.KFR.AUTO_MODERATION_RULE:
        return el(e, H.zUn.NAME, e => O.Z.automodRules.find(_ => _.id === e), e => e.name);
      case H.KFR.GUILD_SOUNDBOARD:
        return el(e, H.zUn.NAME, H.VqG);
      case H.KFR.HOME_SETTINGS:
        return el(e, H.zUn.GUILD_ID, e => G.Z.getSettings(e), () => F.Z.Messages.SERVER_GUIDE, _.id);
      case H.KFR.VOICE_CHANNEL_STATUS:
        return el(e, H.zUn.STATUS, e => u.Z.getChannel(e), e => (0, L.F6)(e, C.default, c.Z, !0));
      default:
        return v.warn('Unknown targetType for log', e), null;
    }
  }(e, _),
  I = C.default.getUser(e.userId);
if (null != s || !![
    H.rsA.MEMBER_PRUNE,
    H.rsA.MEMBER_DISCONNECT,
    H.rsA.MEMBER_MOVE,
    H.rsA.CREATOR_MONETIZATION_REQUEST_CREATED,
    H.rsA.CREATOR_MONETIZATION_TERMS_ACCEPTED
  ].includes(e.action)) {
  if (null != (e = (e = (e = e.set('user', I)).set('target', s)).set('options', function(e) {
      if (null != e.options) {
        let E = {
          ...e.options
        };
        switch (e.options.type) {
          case H.jwA.USER:
            E.subtarget = eU(e.options.id, e => C.default.getUser(e), e => e.tag);
            break;
          case H.jwA.ROLE:
            E.subtarget = eU(e.options.role_name, H.VqG);
        }
        if (null != e.options.channel_id && (E.channel = el(e, '', e => u.Z.getChannel(e), e => e, e.options.channel_id)), null != e.options.members_removed && 0 !== e.options.members_removed && (E.count = e.options.members_removed), null != e.options.event_exception_id) {
          var _;
          let s = O.Z.guildScheduledEvents.find(_ => _.id === e.targetId),
            T = null == s ? void 0 : s.guild_scheduled_event_exceptions.find(_ => _.event_exception_id === e.options.event_exception_id);
          E.subtarget = (0, g.vc)(n()(f.default.extractTimestamp(null !== (_ = null == T ? void 0 : T.event_exception_id) && void 0 !== _ ? _ : '0')), 'LL');
        }
        return E;
      }
      return e.options;
    }(e))).changes) {
    let E = [];
    e.changes.forEach(s => {
      let I = function(e, _, E) {
        if (_.action === H.rsA.APPLICATION_COMMAND_PERMISSION_UPDATE) {
          let _ = e.newValue || e.oldValue;
          switch (_.type) {
            case H.ecB.ROLE:
              e.subtarget = eU(_.id, e => o.Z.getRole(E.id, e), e => e.name);
              break;
            case H.ecB.USER:
              e.subtarget = eU(_.id, e => C.default.getUser(e), e => e.tag);
              break;
            case H.ecB.CHANNEL:
              _.id === T()(E.id).subtract(1).toString() ? e.subtarget = F.Z.Messages.ALL_CHANNELS : e.subtarget = eU(_.id, e => u.Z.getChannel(e), e => (0, L.F6)(e, C.default, c.Z, !0));
          }
          return e;
        }
        switch (e.key) {
          case H.zUn.OWNER_ID:
            return eD(e, e => C.default.getUser(e));
          case H.zUn.CHANNEL_ID:
          case H.zUn.AFK_CHANNEL_ID:
          case H.zUn.SYSTEM_CHANNEL_ID:
          case H.zUn.RULES_CHANNEL_ID:
          case H.zUn.PUBLIC_UPDATES_CHANNEL_ID:
            return eD(e, e => u.Z.getChannel(e), e => (0, L.F6)(e, C.default, c.Z, !0));
          case H.zUn.AFK_TIMEOUT:
            return eD(e, e => e / 60);
          case H.zUn.BITRATE:
            return eD(e, e => e / 1000);
          case H.zUn.COLOR:
            return eD(e, e => (0, r.Rf)(e).toUpperCase());
          case H.zUn.THEME_COLORS:
            return eD(e, e => ''.concat((0, r.Rf)(e[0]).toUpperCase(), ', ').concat((0, r.Rf)(e[1]).toUpperCase()));
          case H.zUn.MAX_AGE:
            return eD(e, e => {
              let _ = P.ZP.getMaxAgeOptions.find(_ => {
                let {
                  value: E
                } = _;
                return e === E;
              });
              return _ ? _.label : e;
            });
          case H.zUn.PERMISSIONS: {
            let _ = [],
              {
                added: E,
                removed: s
              } = eL(e.oldValue, e.newValue);
            if (E.length > 0) {
              let e = new R.ms(H.zUn.PERMISSIONS_GRANTED, null, E);
              _.push(e);
            }
            if (s.length > 0) {
              let e = new R.ms(H.zUn.PERMISSIONS_DENIED, null, s);
              _.push(e);
            }
            return _;
          }
          case H.zUn.PERMISSIONS_GRANTED:
          case H.zUn.PERMISSIONS_DENIED: {
            let _ = [],
              {
                added: E,
                removed: s
              } = eL(e.oldValue, e.newValue);
            if (E.length > 0) {
              let s = new R.ms(e.key, null, E);
              _.push(s);
            }
            if (s.length > 0) {
              let e = new R.ms(H.zUn.PERMISSIONS_RESET, s, s);
              _.push(e);
            }
            return _;
          }
          case H.zUn.FLAGS: {
            let _ = [],
              {
                added: E,
                removed: s
              } = function(e, _) {
                let E = 'number' == typeof e ? e : 0,
                  s = 'number' == typeof _ ? _ : 0,
                  T = d.Ge(s, E),
                  I = d.Ge(E, s),
                  n = [],
                  A = [];
                for (let e in h.zZ) {
                  let _ = h.zZ[e];
                  d.yE(T, _) && n.push(_), d.yE(I, _) && A.push(_);
                }
                return {
                  added: n,
                  removed: A
                };
              }(e.oldValue, e.newValue);
            if (E.length > 0) {
              let s = new R.ms(e.key, null, E);
              _.push(s);
            }
            if (s.length > 0) {
              let E = new R.ms(e.key, s, null);
              _.push(E);
            }
            return _;
          }
          case H.zUn.PREFERRED_LOCALE:
            return eD(e, e => {
              let _ = F.Z.getAvailableLocales().find(_ => _.value === e);
              return null != _ ? _.name : null;
            });
          case H.zUn.VIDEO_QUALITY_MODE:
            return eD(e, e => e === H.Ucd.FULL ? F.Z.Messages.VIDEO_QUALITY_MODE_FULL : F.Z.Messages.VIDEO_QUALITY_MODE_AUTO);
          case H.zUn.SYSTEM_CHANNEL_FLAGS:
            return function(e) {
              let _ = {
                  [H.xmn.SUPPRESS_JOIN_NOTIFICATIONS]: H.zUn.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATIONS,
                  [H.xmn.SUPPRESS_PREMIUM_SUBSCRIPTIONS]: H.zUn.SYSTEM_CHANNEL_FLAG_PREMIUM_SUBSCRIPTIONS,
                  [H.xmn.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS]: H.zUn.SYSTEM_CHANNEL_FLAG_REMINDER_NOTIFICATIONS,
                  [H.xmn.SUPPRESS_JOIN_NOTIFICATION_REPLIES]: H.zUn.SYSTEM_CHANNEL_FLAG_JOIN_NOTIFICATION_REPLIES
                },
                E = [];
              return Object.values(H.xmn).forEach(s => {
                let T = (e.oldValue & s) === s,
                  I = (e.newValue & s) === s;
                if (T === I)
                  return;
                let n = new R.ms(_[s], !T, !I);
                E.push(n);
              }), E;
            }(e);
          case H.zUn.AUTO_MODERATION_ACTIONS:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, e => e.map(e => e.type), e => e.map(l.ZF).join(', '));
            break;
          case H.zUn.AUTO_MODERATION_EVENT_TYPE:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, l.YN);
            break;
          case H.zUn.AUTO_MODERATION_TRIGGER_TYPE:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, l.Ar);
            break;
          case H.zUn.AUTO_MODERATION_TRIGGER_METADATA:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, e => {
                if (null != e && 'object' == typeof e)
                  return null != e.keyword_filter && Array.isArray(e.keyword_filter) ? F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_KEYWORDS_UPDATE.plainFormat({
                    newValue: e.keyword_filter.map(e => '\''.concat(e, '\'')).join(', ')
                  }) : JSON.stringify(e);
                return e;
              });
            break;
          case H.zUn.AUTO_MODERATION_ADD_KEYWORDS:
          case H.zUn.AUTO_MODERATION_REMOVE_KEYWORDS:
          case H.zUn.AUTO_MODERATION_ADD_REGEX_PATTERNS:
          case H.zUn.AUTO_MODERATION_REMOVE_REGEX_PATTERNS:
          case H.zUn.AUTO_MODERATION_ADD_ALLOW_LIST:
          case H.zUn.AUTO_MODERATION_REMOVE_ALLOW_LIST:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, e => null != e && Array.isArray(e) ? e.map(e => '\''.concat(e, '\'')).join(', ') : JSON.stringify(e));
            break;
          case H.zUn.AUTO_MODERATION_EXEMPT_CHANNELS:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, e => e.map(u.Z.getChannel).filter(e => null != e).map(e => (0, L.F6)(e, C.default, c.Z, !0)), e => null != e && e.length > 0 ? e.join(', ') : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NONE);
            break;
          case H.zUn.AUTO_MODERATION_EXEMPT_ROLES:
            if (_.targetType === H.KFR.AUTO_MODERATION_RULE)
              return eD(e, e => e.map(e => o.Z.getRole(E.id, e)).filter(e => null != e).map(e => e.name), e => null != e && e.length > 0 ? e.join(', ') : F.Z.Messages.GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NONE);
            break;
          case H.zUn.AVAILABLE_TAGS:
            return function(e) {
              let {
                oldValue: _,
                newValue: E
              } = e, s = Array.isArray(_) ? _ : [], T = Array.isArray(E) ? E : [];
              if (0 === s.length && 0 === T.length)
                return e;
              let I = {},
                n = {};
              if (s.forEach(e => {
                  I[e.id] = e;
                }), T.forEach(e => {
                  n[e.id] = e;
                }), s.length < T.length) {
                for (let e in n)
                  if (null == I[e])
                    return new R.ms(H.zUn.AVAILABLE_TAG_ADD, null, eS(n[e]));
              }
              if (s.length > T.length) {
                for (let e in I)
                  if (null == n[e])
                    return new R.ms(H.zUn.AVAILABLE_TAG_DELETE, null, eS(I[e]));
              }
              for (let e in I) {
                let _ = I[e],
                  E = n[e];
                if ((null == E ? void 0 : E.name) !== _.name || (null == E ? void 0 : E.emoji_id) !== _.emoji_id || (null == E ? void 0 : E.emoji_name) !== _.emoji_name)
                  return new R.ms(H.zUn.AVAILABLE_TAG_EDIT, eS(_), eS(E));
              }
              return e;
            }(e);
          case H.zUn.SCHEDULED_START_TIME:
          case H.zUn.SCHEDULED_END_TIME:
            return eD(e, e => (0, g.vc)(n()(new Date(e)), 'LLLL'));
        }
        return e;
      }(s, e, _);
      Array.isArray(I) ? I.forEach(e => E.push(e)) : E.push(I);
    }), e = e.set('changes', E);
  }
  E.push(e);
}
  }), E;
}

function eL(e, _) {
  let E = a.vB('string' == typeof e ? e : 0),
s = a.vB('string' == typeof _ ? _ : 0),
T = a.Od(s, E),
I = a.Od(E, s),
n = [],
A = [];
  for (let e in H.Plq) {
let _ = H.Plq[e];
a.e$(T, _) && n.push(_), a.e$(I, _) && A.push(_);
  }
  return {
added: n,
removed: A
  };
}

function eS(e) {
  return null == e ? null : {
id: e.id,
name: e.name,
emojiId: 0 !== e.emoji_id ? e.emoji_id : void 0,
emojiName: e.emoji_name,
moderated: e.moderated
  };
}

function eD(e, _, E) {
  let s = e.newValue,
T = e.oldValue;
  return null != e.newValue && (s = _(e.newValue), null != E && null != s && (s = E(s))), null != e.oldValue && (T = _(e.oldValue), null != E && null != T && (T = E(T))), new R.ms(e.key, T || e.oldValue, s || e.newValue);
}

function el(e, _, E, s, T) {
  let I = null,
n = E(T = null != T ? T : e.targetId);
  if (null != n && null != s && (I = s(n)), null == I) {
let _ = O.Z.deletedTargets[e.targetType];
null != _ && null != _[T] && (I = _[T]);
  }
  if (null == I && null != e.changes) {
let E = e.changes.find(e => e.key === _);
null != E && (I = E.newValue || E.oldValue);
  }
  return null != I ? I : T;
}

function eU(e, _, E) {
  let s = e,
T = _(e);
  return null != T && null != E && (s = E(T)), s;
}

function eG(e, _) {
  return E => null == E.oldValue ? e : _;
}

function eO(e, _) {
  return E => null == E.newValue ? e : _;
}

function eM(e, _, E, s) {
  return T => {
if (null != T.newValue && null != T.oldValue)
  return e;
if (null != T.newValue)
  return _;
if (null != T.oldValue)
  return E;
return s;
  };
}