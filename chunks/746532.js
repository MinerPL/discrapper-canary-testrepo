"use strict";
n.r(t), n.d(t, {
  default: function() {
    return Q
  }
}), n("177593"), n("47120");
var l = n("392711"),
  u = n.n(l),
  a = n("261470"),
  r = n("524437"),
  i = n("812206"),
  o = n("339085"),
  d = n("353926"),
  s = n("653255"),
  f = n("810788"),
  c = n("355298"),
  g = n("763296"),
  E = n("569471"),
  I = n("260483"),
  C = n("144140"),
  S = n("581883"),
  O = n("48481"),
  T = n("199902"),
  N = n("314897"),
  b = n("523746"),
  y = n("592125"),
  p = n("757266"),
  _ = n("831506"),
  v = n("77498"),
  P = n("486472"),
  A = n("650774"),
  R = n("271383"),
  m = n("430824"),
  h = n("738938"),
  L = n("157305"),
  D = n("851634"),
  w = n("293273"),
  V = n("131951"),
  U = n("158776"),
  B = n("19780"),
  M = n("306680"),
  j = n("699516"),
  G = n("944486"),
  k = n("9156"),
  Y = n("594174"),
  H = n("979651"),
  F = n("853872"),
  z = n("695103"),
  W = n("449224"),
  q = n("181106"),
  x = n("237997"),
  Z = n("145597");
async function Q(e, t) {
  let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new a.default;
  await new Promise(e => setImmediate(e));
  let l = Y.default.getCurrentUser();
  if (null == l) return new Promise(l => {
    n.fail(() => {
      l(Q(e, t, n))
    })
  });
  n.succeed();
  let J = Object.values(Y.default.getUsers()),
    K = Object.values(m.default.getGuilds()),
    X = m.default.getAllGuildsRoles(),
    $ = u().values(y.default.getInitialOverlayState()),
    ee = R.default.getMutableAllGuildsAndMembers(),
    et = M.default.getAllReadStates(!0),
    en = H.default.getAllVoiceStates(),
    el = U.default.getState(),
    eu = P.default.unavailableGuilds,
    ea = u().mapValues(o.default.getGuilds(), e => e.emojis),
    er = k.default.getAllSettings(),
    ei = b.default.getInternalState(),
    eo = q.default.getStates(),
    ed = p.default.getAllConnections(),
    es = w.default.getApplicationActivities(),
    ef = _.default.getParties(),
    ec = _.default.getUserParties(),
    eg = N.default.getSessionId(),
    eE = N.default.getAnalyticsToken(),
    eI = W.default.getGameForPID(t),
    eC = A.default.getMemberCounts(),
    eS = j.default.getRelationships(),
    eO = Array.from(c.default.getMessageRequestChannelIds()),
    eT = G.default.getVoiceChannelId(),
    eN = x.default.getFocusedPID(),
    eb = x.default.getSelectedGuildId(),
    ey = x.default.getSelectedChannelId(),
    ep = V.default.getState(),
    e_ = v.default.games,
    ev = Object.values(F.default.paymentSources).map(e => e.toJS()),
    eP = F.default.defaultPaymentSourceId,
    eA = F.default.hasFetchedPaymentSources,
    eR = T.default.getState(),
    em = i.default._getAllApplications().map(e => e.toJS()),
    eh = z.default.testModeApplicationId,
    eL = {
      null: {
        state: B.default.getState(),
        pings: B.default.getPings(),
        quality: B.default.getQuality(),
        hostname: B.default.getHostname(),
        lossRate: B.default.getOutboundLossRate()
      }
    };
  h.default.forEach((e, t) => {
    eL[t] = {
      state: e.state,
      pings: e.getPings(),
      quality: e.quality,
      hostname: e.hostname,
      lossRate: e.getOutboundLossRate()
    }
  });
  let eD = L.default.getLobbies(),
    ew = D.default.getAllVoiceStates(),
    eV = Array.from(f.default.getState().hiddenHotspots),
    eU = d.default.getSerializedState(),
    eB = s.default.getState(),
    eM = E.default.getInitialOverlayState(),
    ej = I.default.getInitialOverlayState(),
    eG = C.default.getInitialOverlayState(),
    ek = (0, O.protoToB64)(r.PreloadedUserSettings, S.default.settings),
    eY = g.default.getOverlaySerializedState();
  return {
    type: "OVERLAY_INITIALIZE",
    version: Z.OVERLAY_VERSION,
    users: J,
    guilds: K,
    allGuildsRoles: X,
    channels: $,
    guildMembers: ee,
    readStates: et,
    voiceStates: en,
    unavailableGuilds: eu,
    emojis: ea,
    allUserGuildSettings: er,
    callStoreInternalState: ei,
    activityLauncherStates: eo,
    connectedApps: ed,
    localActivities: es,
    parties: ef,
    userParties: ec,
    user: l,
    messageRequestChannelIds: eO,
    token: e,
    sessionId: eg,
    analyticsToken: eE,
    presences: el,
    currentGame: eI,
    selectedVoiceChannelId: eT,
    selectedChannelId: ey,
    selectedGuildId: eb,
    guildMemberCounts: eC,
    relationships: eS,
    mediaEngineState: ep,
    rtcConnectionStates: eL,
    focusedPID: eN,
    applications: em,
    paymentSources: ev,
    defaultPaymentSourceId: eP,
    hasFetchedPaymentSources: eA,
    testModeApplicationId: eh,
    lobbies: eD,
    lobbyVoiceStates: ew,
    applicationStreamState: eR,
    hiddenHotspots: eV,
    serializedExperimentStore: eU,
    streamingCapabilitiesStoreState: eB,
    joinedThreads: eM,
    threadMembers: ej,
    threadMessages: eG,
    userSettingsProto: ek,
    soundboardStoreState: eY,
    detectableApplications: e_
  }
}