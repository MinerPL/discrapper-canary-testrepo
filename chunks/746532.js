n.r(t),
    n.d(t, {
        default: function () {
            return Y;
        }
    }),
    n(177593),
    n(47120);
var l = n(392711),
    r = n.n(l),
    i = n(261470),
    a = n(524437),
    u = n(812206),
    o = n(339085),
    s = n(353926),
    c = n(653255),
    d = n(810788),
    f = n(355298),
    Z = n(763296),
    g = n(569471),
    S = n(260483),
    E = n(144140),
    P = n(581883),
    m = n(48481),
    v = n(199902),
    p = n(314897),
    I = n(523746),
    A = n(592125),
    y = n(757266),
    O = n(831506),
    b = n(77498),
    h = n(486472),
    _ = n(650774),
    R = n(271383),
    T = n(430824),
    N = n(293273),
    w = n(131951),
    C = n(158776),
    D = n(19780),
    L = n(306680),
    U = n(699516),
    M = n(944486),
    G = n(9156),
    j = n(594174),
    k = n(979651),
    V = n(853872),
    H = n(695103),
    F = n(449224),
    z = n(181106),
    W = n(237997),
    B = n(145597);
async function Y(e, t) {
    let n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new i.Z();
    await new Promise((e) => setImmediate(e));
    let l = j.default.getCurrentUser();
    if (null == l)
        return new Promise((l) => {
            n.fail(() => {
                l(Y(e, t, n));
            });
        });
    n.succeed();
    let q = Object.values(j.default.getUsers()),
        x = Object.values(T.Z.getGuilds()),
        J = T.Z.getAllGuildsRoles(),
        Q = r().values(A.Z.getInitialOverlayState()),
        K = R.ZP.getMutableAllGuildsAndMembers(),
        X = L.ZP.getAllReadStates(!0),
        $ = k.Z.getAllVoiceStates(),
        ee = C.Z.getState(),
        et = h.Z.unavailableGuilds,
        en = r().mapValues(o.ZP.getGuilds(), (e) => e.emojis),
        el = G.ZP.getAllSettings(),
        er = I.Z.getInternalState(),
        ei = z.Z.getStates(),
        ea = y.Z.getAllConnections(),
        eu = N.Z.getApplicationActivities(),
        eo = O.Z.getParties(),
        es = O.Z.getUserParties(),
        ec = p.default.getSessionId(),
        ed = p.default.getAnalyticsToken(),
        ef = F.Z.getGameForPID(t),
        eZ = _.Z.getMemberCounts(),
        eg = U.Z.getRelationships(),
        eS = Array.from(f.Z.getMessageRequestChannelIds()),
        eE = M.Z.getVoiceChannelId(),
        eP = W.Z.getFocusedPID(),
        em = W.Z.getSelectedGuildId(),
        ev = W.Z.getSelectedChannelId(),
        ep = w.Z.getState(),
        eI = b.Z.games,
        eA = Object.values(V.Z.paymentSources).map((e) => e.toJS()),
        ey = V.Z.defaultPaymentSourceId,
        eO = V.Z.hasFetchedPaymentSources,
        eb = v.Z.getState(),
        eh = u.Z._getAllApplications().map((e) => e.toJS()),
        e_ = H.Z.testModeApplicationId,
        eR = {
            null: {
                state: D.Z.getState(),
                pings: D.Z.getPings(),
                quality: D.Z.getQuality(),
                hostname: D.Z.getHostname(),
                lossRate: D.Z.getOutboundLossRate()
            }
        },
        eT = Array.from(d.Z.getState().hiddenHotspots),
        eN = s.Z.getSerializedState(),
        ew = c.Z.getState(),
        eC = g.Z.getInitialOverlayState(),
        eD = S.Z.getInitialOverlayState(),
        eL = E.Z.getInitialOverlayState(),
        eU = (0, m.xU)(a.o8, P.Z.settings),
        eM = Z.Z.getOverlaySerializedState();
    return {
        type: 'OVERLAY_INITIALIZE',
        version: B.Tq,
        users: q,
        guilds: x,
        allGuildsRoles: J,
        channels: Q,
        guildMembers: K,
        readStates: X,
        voiceStates: $,
        unavailableGuilds: et,
        emojis: en,
        allUserGuildSettings: el,
        callStoreInternalState: er,
        activityLauncherStates: ei,
        connectedApps: ea,
        localActivities: eu,
        parties: eo,
        userParties: es,
        user: l,
        messageRequestChannelIds: eS,
        token: e,
        sessionId: ec,
        analyticsToken: ed,
        presences: ee,
        currentGame: ef,
        selectedVoiceChannelId: eE,
        selectedChannelId: ev,
        selectedGuildId: em,
        guildMemberCounts: eZ,
        relationships: eg,
        mediaEngineState: ep,
        rtcConnectionStates: eR,
        focusedPID: eP,
        applications: eh,
        paymentSources: eA,
        defaultPaymentSourceId: ey,
        hasFetchedPaymentSources: eO,
        testModeApplicationId: e_,
        applicationStreamState: eb,
        hiddenHotspots: eT,
        serializedExperimentStore: eN,
        streamingCapabilitiesStoreState: ew,
        joinedThreads: eC,
        threadMembers: eD,
        threadMessages: eL,
        userSettingsProto: eU,
        soundboardStoreState: eM,
        detectableApplications: eI
    };
}
