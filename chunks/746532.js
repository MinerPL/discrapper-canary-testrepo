"use strict";
l.r(t), l.d(t, {
  default: function() {
    return Z
  }
}), l("177593"), l("47120");
var n = l("392711"),
  u = l.n(n),
  a = l("261470"),
  r = l("524437"),
  i = l("812206"),
  d = l("339085"),
  f = l("353926"),
  s = l("653255"),
  o = l("810788"),
  c = l("355298"),
  g = l("763296"),
  S = l("569471"),
  E = l("260483"),
  p = l("144140"),
  m = l("581883"),
  v = l("48481"),
  I = l("199902"),
  A = l("314897"),
  P = l("523746"),
  y = l("592125"),
  O = l("757266"),
  b = l("831506"),
  h = l("77498"),
  R = l("486472"),
  _ = l("650774"),
  T = l("271383"),
  N = l("430824"),
  L = l("293273"),
  w = l("131951"),
  C = l("158776"),
  D = l("19780"),
  U = l("306680"),
  M = l("699516"),
  G = l("944486"),
  j = l("9156"),
  k = l("594174"),
  V = l("979651"),
  H = l("853872"),
  F = l("695103"),
  z = l("449224"),
  B = l("181106"),
  W = l("237997"),
  Y = l("145597");
async function Z(e, t) {
  let l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new a.default;
  await new Promise(e => setImmediate(e));
  let n = k.default.getCurrentUser();
  if (null == n) return new Promise(n => {
    l.fail(() => {
      n(Z(e, t, l))
    })
  });
  l.succeed();
  let q = Object.values(k.default.getUsers()),
    x = Object.values(N.default.getGuilds()),
    J = N.default.getAllGuildsRoles(),
    Q = u().values(y.default.getInitialOverlayState()),
    K = T.default.getMutableAllGuildsAndMembers(),
    X = U.default.getAllReadStates(!0),
    $ = V.default.getAllVoiceStates(),
    ee = C.default.getState(),
    et = R.default.unavailableGuilds,
    el = u().mapValues(d.default.getGuilds(), e => e.emojis),
    en = j.default.getAllSettings(),
    eu = P.default.getInternalState(),
    ea = B.default.getStates(),
    er = O.default.getAllConnections(),
    ei = L.default.getApplicationActivities(),
    ed = b.default.getParties(),
    ef = b.default.getUserParties(),
    es = A.default.getSessionId(),
    eo = A.default.getAnalyticsToken(),
    ec = z.default.getGameForPID(t),
    eg = _.default.getMemberCounts(),
    eS = M.default.getRelationships(),
    eE = Array.from(c.default.getMessageRequestChannelIds()),
    ep = G.default.getVoiceChannelId(),
    em = W.default.getFocusedPID(),
    ev = W.default.getSelectedGuildId(),
    eI = W.default.getSelectedChannelId(),
    eA = w.default.getState(),
    eP = h.default.games,
    ey = Object.values(H.default.paymentSources).map(e => e.toJS()),
    eO = H.default.defaultPaymentSourceId,
    eb = H.default.hasFetchedPaymentSources,
    eh = I.default.getState(),
    eR = i.default._getAllApplications().map(e => e.toJS()),
    e_ = F.default.testModeApplicationId,
    eT = {
      null: {
        state: D.default.getState(),
        pings: D.default.getPings(),
        quality: D.default.getQuality(),
        hostname: D.default.getHostname(),
        lossRate: D.default.getOutboundLossRate()
      }
    },
    eN = Array.from(o.default.getState().hiddenHotspots),
    eL = f.default.getSerializedState(),
    ew = s.default.getState(),
    eC = S.default.getInitialOverlayState(),
    eD = E.default.getInitialOverlayState(),
    eU = p.default.getInitialOverlayState(),
    eM = (0, v.protoToB64)(r.PreloadedUserSettings, m.default.settings),
    eG = g.default.getOverlaySerializedState();
  return {
    type: "OVERLAY_INITIALIZE",
    version: Y.OVERLAY_VERSION,
    users: q,
    guilds: x,
    allGuildsRoles: J,
    channels: Q,
    guildMembers: K,
    readStates: X,
    voiceStates: $,
    unavailableGuilds: et,
    emojis: el,
    allUserGuildSettings: en,
    callStoreInternalState: eu,
    activityLauncherStates: ea,
    connectedApps: er,
    localActivities: ei,
    parties: ed,
    userParties: ef,
    user: n,
    messageRequestChannelIds: eE,
    token: e,
    sessionId: es,
    analyticsToken: eo,
    presences: ee,
    currentGame: ec,
    selectedVoiceChannelId: ep,
    selectedChannelId: eI,
    selectedGuildId: ev,
    guildMemberCounts: eg,
    relationships: eS,
    mediaEngineState: eA,
    rtcConnectionStates: eT,
    focusedPID: em,
    applications: eR,
    paymentSources: ey,
    defaultPaymentSourceId: eO,
    hasFetchedPaymentSources: eb,
    testModeApplicationId: e_,
    applicationStreamState: eh,
    hiddenHotspots: eN,
    serializedExperimentStore: eL,
    streamingCapabilitiesStoreState: ew,
    joinedThreads: eC,
    threadMembers: eD,
    threadMessages: eU,
    userSettingsProto: eM,
    soundboardStoreState: eG,
    detectableApplications: eP
  }
}