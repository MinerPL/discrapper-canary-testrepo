"use strict";
a.r(t), a.d(t, {
  default: function() {
    return r
  }
}), a("781738"), a("424973"), a("222007");
var n = a("917351"),
  l = a.n(n),
  o = a("102053"),
  s = a("487269");

function r(e) {
  let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
    a = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
  return o.default.logGroups.map(n => {
    var o, r;
    let {
      index: u,
      timestamp: c,
      logs: d,
      nativeLogs: m,
      serverTrace: f
    } = n, g = 0 === u ? null !== (r = null === (o = l.find(d, e => e.log.indexOf("Logger loaded") >= 0)) || void 0 === o ? void 0 : o.timestamp) && void 0 !== r ? r : e : c, p = function(e, t) {
      var a, n;
      let o = (function(e) {
          let t = [];
          for (let a = 0; a < e.length; a++) {
            let n = e[a],
              l = e[a + 1];
            null != l && l.log === n.log.replace("Start ", "Finish ") ? (l.log = l.log.replace("Finish ", ""), t.push(l), a++) : t.push(n)
          }
          return t
        })(e).map(e => {
          let a = null == e.timestamp ? "" : ((e.timestamp - t) / 1e3).toFixed(3),
            n = null == e.delta ? "" : String(Math.round(e.delta));
          return {
            totalTime: a,
            deltaTime: n,
            log: "".concat(e.emoji.length > 0 ? "".concat(e.emoji, " ") : "").concat(e.prefix).concat(e.log, "\n")
          }
        }),
        s = null !== (a = l.max(o.map(e => e.totalTime.length))) && void 0 !== a ? a : 0,
        r = null !== (n = l.max(o.map(e => e.deltaTime.length))) && void 0 !== n ? n : 0;
      return o.map(e => {
        let {
          totalTime: t,
          deltaTime: a,
          log: n
        } = e;
        return "".concat(l.padStart(t, s), " ").concat(l.padStart(a, r), " ").concat(n)
      }).join("")
    }(function(e, t, a, n) {
      e = e.slice();
      let l = new Set(t.map(i)),
        o = "",
        s = [];
      t.forEach(t => {
        let n = i(t),
          r = 0,
          u = a || !t.autoGenerated,
          c = n.startsWith("Start ") && !n.includes("RUN_JS_BUNDLE") && l.has(n.replace("Start ", "Finish ")),
          d = n.startsWith("Finish ") && !n.includes("RUN_JS_BUNDLE") && l.has(n.replace("Finish ", "Start "));
        if (d) {
          o = o.substring(2);
          let e = s.pop();
          null != e && (r = t.timestamp - e.timestamp, u = u || r > 5 && ! function(e) {
            return ["GET_CONSTANTS", "CONVERT_CONSTANTS"].some(t => e.includes(t))
          }(n), e.shouldKeep = e.shouldKeep || u)
        }
        let m = {
          emoji: "☕",
          timestamp: t.timestamp,
          delta: r > 0 ? r : void 0,
          prefix: o,
          log: n,
          shouldKeep: u
        };
        (function(e, t) {
          let a = 0;
          for (; a < e.length; a++) {
            let {
              timestamp: n
            } = e[a];
            if (null != n && n > t.timestamp) break
          }
          e.splice(a, 0, t)
        })(e, m), c && (o += "| ", s.push(m))
      });
      let r = !1;
      return e.filter(e => !(r && e.log.includes("↪")) && !(r = !n && "\uD83C\uDFA8" === e.emoji || !1 === e.shouldKeep))
    }(d, m, t, a), g), h = "Trace #".concat(u + 1, " started ").concat((0, s.getTimestampString)(c), "\n").concat(p);
    return null != f && (h += "\n Server trace for trace #".concat(u + 1).concat(f)), h
  }).join("\n\n")
}

function i(e) {
  let t = null == e.tag ? e.label : "".concat(e.label, " ").concat(e.tag);
  return t.includes("_START") && (t = "Start " + t.replace("_START", "")), t.includes("_END") && (t = "Finish " + t.replace("_END", "")), t
}