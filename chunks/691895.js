"use strict";
n.d(t, {
  Z: function() {
    return a
  }
}), n(757143), n(653041), n(47120);
var i = n(392711),
  r = n.n(i),
  s = n(956067),
  o = n(91159);

function a(e) {
  let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
    n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
  return s.Z.logGroups.map(i => {
    var s, a;
    let {
      index: u,
      timestamp: _,
      logs: d,
      nativeLogs: c,
      serverTrace: E
    } = i, I = 0 === u ? null !== (a = null === (s = r().find(d, e => e.log.indexOf("Logger loaded") >= 0)) || void 0 === s ? void 0 : s.timestamp) && void 0 !== a ? a : e : _, T = function(e, t) {
      var n, i;
      let s = (function(e) {
          let t = [];
          for (let n = 0; n < e.length; n++) {
            let i = e[n],
              r = e[n + 1];
            null != r && r.log === i.log.replace("Start ", "Finish ") ? (r.log = r.log.replace("Finish ", ""), t.push(r), n++) : t.push(i)
          }
          return t
        })(e).map(e => {
          let n = null == e.timestamp ? "" : ((e.timestamp - t) / 1e3).toFixed(3);
          return {
            totalTime: n,
            deltaTime: null == e.delta ? "" : String(Math.round(e.delta)),
            log: "".concat(e.emoji.length > 0 ? "".concat(e.emoji, " ") : "").concat(e.prefix).concat(e.log, "\n")
          }
        }),
        o = null !== (n = r().max(s.map(e => e.totalTime.length))) && void 0 !== n ? n : 0,
        a = null !== (i = r().max(s.map(e => e.deltaTime.length))) && void 0 !== i ? i : 0;
      return s.map(e => {
        let {
          totalTime: t,
          deltaTime: n,
          log: i
        } = e;
        return "".concat(r().padStart(t, o), " ").concat(r().padStart(n, a), " ").concat(i)
      }).join("")
    }(function(e, t, n, i) {
      e = e.slice();
      let r = new Set(t.map(l)),
        s = "",
        o = [];
      t.forEach(t => {
        let i = l(t),
          a = 0,
          u = n || !t.autoGenerated,
          _ = i.startsWith("Start ") && !i.includes("RUN_JS_BUNDLE") && r.has(i.replace("Start ", "Finish "));
        if (i.startsWith("Finish ") && !i.includes("RUN_JS_BUNDLE") && r.has(i.replace("Finish ", "Start "))) {
          s = s.substring(2);
          let e = o.pop();
          null != e && (a = t.timestamp - e.timestamp, u = u || a > 5 && ! function(e) {
            return ["GET_CONSTANTS", "CONVERT_CONSTANTS"].some(t => e.includes(t))
          }(i), e.shouldKeep = e.shouldKeep || u)
        }
        let d = {
          emoji: "☕",
          timestamp: t.timestamp,
          delta: a > 0 ? a : void 0,
          prefix: s,
          log: i,
          shouldKeep: u
        };
        (function(e, t) {
          let n = 0;
          for (; n < e.length; n++) {
            let {
              timestamp: i
            } = e[n];
            if (null != i && i > t.timestamp) break
          }
          e.splice(n, 0, t)
        })(e, d), _ && (s += "| ", o.push(d))
      });
      let a = !1;
      return e.filter(e => !(a && e.log.includes("↪")) && !(a = !i && "\uD83C\uDFA8" === e.emoji || !1 === e.shouldKeep))
    }(d, c, t, n), I), h = "Trace #".concat(u + 1, " started ").concat((0, o.Ye)(_), "\n").concat(T);
    return null != E && (h += "\n Server trace for trace #".concat(u + 1).concat(E)), h
  }).join("\n\n")
}

function l(e) {
  let t = null == e.tag ? e.label : "".concat(e.label, " ").concat(e.tag);
  return t.includes("_START") && (t = "Start " + t.replace("_START", "")), t.includes("_END") && (t = "Finish " + t.replace("_END", "")), t
}