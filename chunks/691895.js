n.d(t, {
	Z: function () {
		return o;
	}
}),
	n(757143),
	n(653041),
	n(47120);
var r = n(392711),
	i = n.n(r),
	a = n(956067),
	s = n(91159);
function o(e) {
	let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
		n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
	return a.Z.logGroups
		.map((r) => {
			var a, o;
			let { index: u, timestamp: c, logs: d, nativeLogs: _, serverTrace: E } = r,
				f = 0 === u ? (null !== (o = null === (a = i().find(d, (e) => e.log.indexOf('Logger loaded') >= 0)) || void 0 === a ? void 0 : a.timestamp) && void 0 !== o ? o : e) : c,
				h = (function (e, t) {
					var n, r;
					let a = (function (e) {
							let t = [];
							for (let n = 0; n < e.length; n++) {
								let r = e[n],
									i = e[n + 1];
								null != i && i.log === r.log.replace('Start ', 'Finish ') ? ((i.log = i.log.replace('Finish ', '')), t.push(i), n++) : t.push(r);
							}
							return t;
						})(e).map((e) => {
							let n = null == e.timestamp ? '' : ((e.timestamp - t) / 1000).toFixed(3);
							return {
								totalTime: n,
								deltaTime: null == e.delta ? '' : String(Math.round(e.delta)),
								log: ''
									.concat(e.emoji.length > 0 ? ''.concat(e.emoji, ' ') : '')
									.concat(e.prefix)
									.concat(e.log, '\n')
							};
						}),
						s = null !== (n = i().max(a.map((e) => e.totalTime.length))) && void 0 !== n ? n : 0,
						o = null !== (r = i().max(a.map((e) => e.deltaTime.length))) && void 0 !== r ? r : 0;
					return a
						.map((e) => {
							let { totalTime: t, deltaTime: n, log: r } = e;
							return ''.concat(i().padStart(t, s), ' ').concat(i().padStart(n, o), ' ').concat(r);
						})
						.join('');
				})(
					(function (e, t, n, r) {
						e = e.slice();
						let i = new Set(t.map(l)),
							a = '',
							s = [];
						t.forEach((t) => {
							let r = l(t),
								o = 0,
								u = n || !t.autoGenerated,
								c = r.startsWith('Start ') && !r.includes('RUN_JS_BUNDLE') && i.has(r.replace('Start ', 'Finish '));
							if (r.startsWith('Finish ') && !r.includes('RUN_JS_BUNDLE') && i.has(r.replace('Finish ', 'Start '))) {
								a = a.substring(2);
								let e = s.pop();
								null != e &&
									((o = t.timestamp - e.timestamp),
									(u =
										u ||
										(o > 5 &&
											!(function (e) {
												return ['GET_CONSTANTS', 'CONVERT_CONSTANTS'].some((t) => e.includes(t));
											})(r))),
									(e.shouldKeep = e.shouldKeep || u));
							}
							let d = {
								emoji: '\u2615',
								timestamp: t.timestamp,
								delta: o > 0 ? o : void 0,
								prefix: a,
								log: r,
								shouldKeep: u
							};
							(function (e, t) {
								let n = 0;
								for (; n < e.length; n++) {
									let { timestamp: r } = e[n];
									if (null != r && r > t.timestamp) break;
								}
								e.splice(n, 0, t);
							})(e, d),
								c && ((a += '| '), s.push(d));
						});
						let o = !1;
						return e.filter((e) => !(o && e.log.includes('\u21AA')) && !(o = (!r && '\uD83C\uDFA8' === e.emoji) || !1 === e.shouldKeep));
					})(d, _, t, n),
					f
				),
				p = 'Trace #'
					.concat(u + 1, ' started ')
					.concat((0, s.Ye)(c), '\n')
					.concat(h);
			return null != E && (p += '\n Server trace for trace #'.concat(u + 1).concat(E)), p;
		})
		.join('\n\n');
}
function l(e) {
	let t = null == e.tag ? e.label : ''.concat(e.label, ' ').concat(e.tag);
	return t.includes('_START') && (t = 'Start ' + t.replace('_START', '')), t.includes('_END') && (t = 'Finish ' + t.replace('_END', '')), t;
}
